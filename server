using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;
using ServerData;
using System.IO;
using System.Threading;

namespace Server
{
    class Server
    {

        static Socket listnerSocket;
        static List<ClientData> _clients;
        public string id;
        



        static void Main(string[] args)
        {

            Console.WriteLine("Starting server on " + Class1.GetIPAdress());
            listnerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            _clients = new List<ClientData>();

            IPEndPoint ip = new IPEndPoint(IPAddress.Parse(Class1.GetIPAdress()), 4242);
            listnerSocket.Bind(ip);

            Thread listenThread = new Thread(ListenThread);
            listenThread.Start();

        }

        static void ListenThread()
        {
            for (; ; )
            {
                listnerSocket.Listen(0);
                _clients.Add(new ClientData(listnerSocket.Accept()));
            }

        }


        public static void Data_IN(object cSocket)
        {
            Socket clientSocket = (Socket)cSocket;

            byte[] Buffer;
            int readBytes;

            for (; ; )
            {
                try
                {


                    Buffer = new byte[clientSocket.SendBufferSize];
                    readBytes = clientSocket.Receive(Buffer);

                    if (readBytes > 0)
                    {
                        Class1 class1 = new Class1(Buffer);  
                        DataManager(class1);

                    }
                }
                catch(SocketException ex)
                {
                    Console.WriteLine("a client has left the chat");
                    Console.ReadLine();
                }

            }

        }



        public static void DataManager(Class1 p)
        {
            switch (p.packetType)
            {
                case PacketType.Chat:
                    foreach (ClientData c in _clients)
                    
                        c.clientSocket.Send(p.toBytes());
                                       
                    break;
            }
        }
    
    
    
    }
    class ClientData
    {
        public Socket clientSocket;
        public Thread clientThread;
        public string id;

        public ClientData()
        {
            
            id = Guid.NewGuid().ToString();
            clientThread = new Thread(Server.Data_IN);
            clientThread.Start(clientSocket);
        }
        public ClientData(Socket clientSocket)
        {
            this.clientSocket = clientSocket;
            id = Guid.NewGuid().ToString();
            clientThread = new Thread(Server.Data_IN);
            clientThread.Start(clientSocket);
            SendRegistrationPacket();

        }

        public void SendRegistrationPacket()
        {
            Class1 p = new Class1(PacketType.Registration, "server");
            p.Gdata.Add(id);
            clientSocket.Send(p.toBytes());
        }
    }

}
